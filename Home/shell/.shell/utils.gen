#
# Utils
#

# delete empty directories recursively
alias rcl='find . -type d -empty -delete'

# rsync shortcuts
alias rcp='rsync -av -P'
alias rmv='rsync -av -P --remove-source-files'

function cl() {
  # cd and ls in one
  local dir="$1"
  local dir="${dir:=$HOME}"
  if [[ -d "$dir" ]]; then
    cd "$dir" >/dev/null; ls
  else
    echo "bash: cl: $dir: Directory not found"
  fi
}

function scour () {
  # search everywhere
  sudo find / -iname '*'$1'*'
}

function findin() {
  grep -rnw '.' -e $1
}

function mcd () {
  # mkdir and cd in
  mkdir -p $1 && cd $1
}

function cpln () {
  # Copy and link
  for f in `ls $1`; do
    sudo ln $1/$f $2 && sudo ln -sf $2/$f $1
  done
}

function mkln () {
  # make a file, link it, then open it for editing
  sudo touch $1 && sudo ln -s $1 $2 && nano $1
}

function calc () {
  # calculator
  echo "scale=3;$@" | bc -l
}

note () {
  # simple note taker
  if [[ ! -f $HOME/.notes ]]; then
    touch "$HOME/.notes"
  fi

  if ! (($#)); then
    # no arguments, print file
    cat "$HOME/.notes"
  elif [[ "$1" == "-c" ]]; then
    # clear file
    printf "%s" > "$HOME/.notes"
  elif [[ "$1" == "-h" ]]; then
    echo "note -c to clear"
  else
    # add all arguments to file
    printf "%s\n" "$*" >> "$HOME/.notes"
  fi
}

ex () { 
  # usage: ex <file>
  if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2)   tar xjf $1   ;;
      *.tar.gz)    tar xzf $1   ;;
      *.bz2)       bunzip2 $1   ;;
      *.rar)       unrar x $1     ;;
      *.gz)        gunzip $1    ;;
      *.tar)       tar xf $1    ;;
      *.tbz2)      tar xjf $1   ;;
      *.tgz)       tar xzf $1   ;;
      *.zip)       unzip $1     ;;
      *.Z)         uncompress $1;;
      *.7z)        7z x $1      ;;
      *)           echo "'$1' cannot be extracted via ex()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

function dockerclear() {
  # Stop and remove a docker container
  docker stop $1
  docker rm $1
}

function resrc() {
  # Reload .bashrc
  source ~/.bashrc
}

function cmakeb() {
  # CMake and build a project, maybe do other things too
  currDir=${PWD##*/}
  command=$1

  if [[ $currDir == "build" ]]; then
    echo Already in build dir
    inBuild=true
  else
    # Not in build dir
    echo Making build dir
    mkdir -p build
    cd build
  fi

  echo Building...
  cmake clean .
  cmake ..
  cmake --build .
  
  if [[ $command == "install" ]]; then
    echo Installing as well
    sudo cmake --build . --target install
    sudo ldconfig
  elif [[ $command == "test" ]]; then
    echo Testing as well
    cd ..
    cmake --build ./build --target test
  elif [[ $command == "docs" ]]; then
    echo Gen docs as well
    cmake --build . --target docs
  fi

  if [[ !inBuild ]]; then
    cd ..
  fi
}